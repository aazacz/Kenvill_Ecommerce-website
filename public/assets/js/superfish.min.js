/*
 * jQuery Superfish Menu Plugin - v1.7.10
 * Copyright (c) 2018 Joel Birch
 *
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 */

;!(function($, window) {
    "use strict";
  
    var sf = (function() {
      var c = {
        bcClass: "sf-breadcrumb",
        menuClass: "sf-js-enabled",
        anchorClass: "sf-with-ul",
        menuArrowClass: "sf-arrows"
      };
      var ios = /iPhone|iPad|iPod/i.test(navigator.userAgent);
      var windowsPhone = /iemobile/i.test(navigator.userAgent);
      var msTouch = window.navigator.msPointerEnabled;
      var pointer = window.PointerEvent;
    
      var toggleMenuClasses = function($menu, add) {
        var menuClass = c.menuClass;
        if (add) {
          menuClass += " " + c.menuArrowClass;
        }
        $menu[add ? "addClass" : "removeClass"](menuClass);
      };
    
      var setTouchAction = function($menu) {
        var style = document.documentElement.style;
        if ("behavior" in style && "fill" in style && windowsPhone) {
          $menu.css("ms-touch-action", "auto");
        }
      };
    
      var supportsPointerEvents = function() {
        return !!pointer;
      };
    
      var toggleAnchorClass = function($li, add) {
        $li.children("a")[add ? "addClass" : "removeClass"](c.anchorClass);
      };
    
      var handleHover = function($menu, o) {
        var targets = "li:has(" + o.popUpSelector + ")";
        $.fn.hoverIntent && !o.disableHI
          ? $menu.hoverIntent(over, out, targets)
          : $menu.on("mouseenter.superfish", targets, over).on("mouseleave.superfish", targets, out);
        var touchStart = ios ? "touchend.superfish" : "MSPointerDown.superfish";
        touchStart += " pointerdown.superfish";
        if (!msTouch) {
          touchStart += " touchend.superfish";
        }
        $menu.on("focusin.superfish", "li", over).on("focusout.superfish", "li", out).on(touchStart, "a", o, touchHandler);
      };
    
      var over = function() {
        var $this = $(this);
        var o = getOptions($this);
        clearTimeout(o.sfTimer);
        $this
          .siblings()
          .superfish("hide")
          .end()
          .superfish("show");
      };
    
      var out = function() {
        var $this = $(this);
        var o = getOptions($this);
        if (!o) return;
        var $sfEls = $this.siblings(o.popUpSelector);
        o.sfTimer = setTimeout(function() {
          o.onIdle.call($sfEls);
          $sfEls.superfish("hide");
        }, o.delay);
      };
    
      var touchHandler = function(event) {
        var $this = $(this);
        var o = getOptions($this);
        var $sfEls = $this.siblings(o.popUpSelector);
        if (o.onHandleTouch.call($sfEls) === false) {
          return this;
        }
        if ($sfEls.length > 0 && $sfEls.is(":hidden")) {
          $this.one("click.superfish", false);
          if (event.type === "MSPointerDown") {
            $this.trigger("focus");
          } else {
            over.call($this.parent("li"));
          }
        }
      };
    
      var getOptions = function($el) {
        var $menu = $el.closest("." + c.menuClass);
        return $menu.data("sfOptions");
      };
    
      return {
        hide: function() {
          var $this = $(this);
          var o = getOptions($this);
          if (!$this.length || !o) return this;
          var $sub = $this.find("li." + o.hoverClass).add(this).not(".overrideThisToUse");
          $sub.removeClass(o.hoverClass + " " + c.bcClass).addClass(o.pathClass);
          o.onBeforeHide.call($sub);
          $sub
            .stop(true, true)
            .animate(o.animationOut, o.speedOut, function() {
              var $this = $(this);
              o.onHide.call($this);
            });
          return this;
        },
    
        show: function() {
          var $this = $(this);
          var o = getOptions($this);
          if (!$this.length || !o) return this;
          var $sub = $this.addClass(o.hoverClass).find("> " + o.popUpSelector);
          o.onBeforeShow.call($sub);
          $sub
            .stop(true, true)
            .animate(o.animation, o.speed, function() {
              var $this = $(this);
              o.onShow.call($this);
            });
          return this;
        },
    
        destroy: function() {
          return this.each(function() {
            var $this = $(this);
            var o = $this.data("sfOptions");
            if (!o) return false;
    
            var $sub = $this.find(o.popUpSelector).parent("li");
            clearTimeout(o.sfTimer);
            toggleMenuClasses($this, false);
            toggleAnchorClass($sub, false);
            setTouchAction($this);
            $this.off(".superfish").off(".hoverIntent");
            $sub.children(o.popUpSelector).attr("style", function(i, style) {
              if (typeof style !== "undefined") {
                return style.replace(/display[^;]+;?/g, "");
              }
            });
            o.$path.removeClass(o.hoverClass + " " + c.bcClass).addClass(o.pathClass);
            $this.find("." + o.hoverClass).removeClass(o.hoverClass);
            o.onDestroy.call($this);
            $this.removeData("sfOptions");
          });
        },
    
        init: function(options) {
          return this.each(function() {
            var $this = $(this);
            if ($this.data("sfOptions")) return false;
            var o = $.extend({}, $.fn.superfish.defaults, options);
            o.$path = h($this, o);
            $this.data("sfOptions", o);
            toggleMenuClasses($this, true);
            toggleAnchorClass($this.find("li:has(" + o.popUpSelector + ")"), true);
            setTouchAction($this);
            handleHover($this, o);
            h($this, o).not("." + c.bcClass).superfish("hide", true);
            o.onInit.call(this);
          });
        }
      };
    })();
    
    $.fn.superfish = function(method, args) {
      if (sf[method]) {
        return sf[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === "object" || !method) {
        return sf.init.apply(this, arguments);
      } else {
        $.error("Method " + method + " does not exist on jQuery.fn.superfish");
      }
    };
    
    $.fn.superfish.defaults = {
      popUpSelector: "ul,.sf-mega",
      hoverClass: "sfHover",
      pathClass: "overrideThisToUse",
      pathLevels: 1,
      delay: 800,
      animation: { opacity: "show" },
      animationOut: { opacity: "hide" },
      speed: "normal",
      speedOut: "fast",
      cssArrows: true,
      disableHI: false,
      onInit: $.noop,
      onBeforeShow: $.noop,
      onShow: $.noop,
      onBeforeHide: $.noop,
      onHide: $.noop,
      onIdle: $.noop,
      onDestroy: $.noop,
      onHandleTouch: $.noop
    };
  })(jQuery, window);
  